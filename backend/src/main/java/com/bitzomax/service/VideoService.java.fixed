package com.bitzomax.service;

import com.bitzomax.model.ConversionStatus;
import com.bitzomax.model.Video;
import com.bitzomax.repository.VideoRepository;
import com.bitzomax.mapper.VideoMapper;
import com.bitzomax.dto.VideoDTO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
public class VideoService {
    
    private static final Logger logger = LoggerFactory.getLogger(VideoService.class);
    
    @Autowired
    private VideoRepository videoRepository;
    
    @Autowired
    private VideoMapper videoMapper;
    
    public List<Video> getAllVideos(boolean includeHidden) {
        logger.debug("Fetching all videos, includeHidden={}", includeHidden);
        List<Video> videos;
        if (includeHidden) {
            videos = videoRepository.findAll();
        } else {
            videos = videoRepository.findByIsVisibleTrue();
            // Double-check for null visibility values
            videos = videos.stream()
                .filter(v -> v.getIsVisible() != null && v.getIsVisible())
                .toList();
        }
        logger.info("Found {} videos (includeHidden={})", videos.size(), includeHidden);
        return videos;
    }
    
    public Page<Video> getPagedVideos(Pageable pageable, boolean includeHidden) {
        logger.debug("Fetching paged videos, page={}, size={}, includeHidden={}", 
                pageable.getPageNumber(), pageable.getPageSize(), includeHidden);
        if (includeHidden) {
            return videoRepository.findAll(pageable);
        } else {
            return videoRepository.findByIsVisibleTrue(pageable);
        }
    }
    
    public Optional<Video> findVideoById(Long id) {
        logger.debug("Finding video by ID: {}", id);
        return videoRepository.findById(id);
    }
    
    @Transactional
    public Video saveVideo(Video video) {
        logger.debug("Saving new video: {}", video.getTitle());
        // Set defaults if not provided
        if (video.getConversionStatus() == null) {
            video.setConversionStatus(ConversionStatus.PENDING);
        }
        if (video.getIsVisible() == null) {
            video.setIsVisible(true);
        }
        
        return videoRepository.save(video);
    }
    
    @Transactional
    public void updateVideoVisibility(Long id, boolean isVisible) {
        logger.debug("Updating video visibility, id={}, isVisible={}", id, isVisible);
        Optional<Video> videoOpt = videoRepository.findById(id);
        if (videoOpt.isPresent()) {
            Video video = videoOpt.get();
            video.setIsVisible(isVisible);
            videoRepository.save(video);
        } else {
            logger.warn("Video not found with ID: {}", id);
        }
    }
    
    @Transactional
    public void updateVideoConversionStatus(Long id, ConversionStatus status) {
        logger.debug("Updating video conversion status, id={}, status={}", id, status);
        Optional<Video> videoOpt = videoRepository.findById(id);
        if (videoOpt.isPresent()) {
            Video video = videoOpt.get();
            video.setConversionStatus(status);
            
            // Automatically set visibility based on conversion status
            if (status == ConversionStatus.COMPLETED) {
                video.setIsVisible(true);
            } else if (status == ConversionStatus.FAILED) {
                video.setIsVisible(false);
            }
            
            videoRepository.save(video);
        } else {
            logger.warn("Video not found with ID: {}", id);
        }
    }
    
    /**
     * Find all videos by genre ID
     * @param genreId the genre ID to filter by
     * @return list of videos belonging to the specified genre
     */
    public List<Video> getVideosByGenreId(Long genreId) {
        logger.debug("Fetching videos by genre ID: {}", genreId);
        return videoRepository.findByGenreIdAndIsVisibleTrue(genreId);
    }
    
    /**
     * Find videos by genre ID with pagination
     * @param genreId the genre ID to filter by
     * @param pageable pagination information
     * @return page of videos belonging to the specified genre
     */
    public Page<Video> getPagedVideosByGenreId(Long genreId, Pageable pageable) {
        logger.debug("Fetching paged videos by genre ID: {}, page={}, size={}", 
                genreId, pageable.getPageNumber(), pageable.getPageSize());
        return videoRepository.findByGenreIdAndIsVisibleTrue(genreId, pageable);
    }
    
    @Transactional
    public void deleteVideo(Long id) {
        logger.debug("Deleting video with ID: {}", id);
        videoRepository.deleteById(id);
    }
    
    /**
     * Create a new video from DTO
     */
    @Transactional
    public VideoDTO createVideo(VideoDTO videoDTO) {
        logger.debug("Creating new video from DTO: {}", videoDTO.getTitle());
        
        // Set defaults
        if (videoDTO.getConversionStatus() == null) {
            videoDTO.setConversionStatus(ConversionStatus.COMPLETED);
        }
        
        if (videoDTO.getIsVisible() == null) {
            videoDTO.setIsVisible(true);
        }
        
        // Convert DTO to entity
        Video video = videoMapper.toEntity(videoDTO);
        
        // Save the video
        Video savedVideo = videoRepository.save(video);
        logger.info("Saved new video: {} (ID: {})", savedVideo.getTitle(), savedVideo.getId());
        
        // Convert back to DTO and return
        return videoMapper.toDto(savedVideo);
    }
    
    /**
     * Get a video by ID and convert it to a DTO
     *
     * @param id the video ID
     * @return the video DTO
     */
    public VideoDTO getVideoById(Long id) {
        logger.debug("Getting video by ID: {}", id);
        Video video = videoRepository.findById(id)
                .orElseThrow(() -> new jakarta.persistence.EntityNotFoundException("Video not found with ID: " + id));
        return videoMapper.toDto(video);
    }
    
    /**
     * Get all videos with pagination and convert them to DTOs
     *
     * @param pageable the pagination information
     * @return a page of video DTOs
     */
    public Page<VideoDTO> getAllVideosWithPagination(Pageable pageable) {
        logger.debug("Getting all videos with pagination: {}", pageable);
        Page<Video> videoPage = videoRepository.findAll(pageable);
        return videoPage.map(videoMapper::toDto);
    }
    
    /**
     * Update a video from DTO
     *
     * @param id the video ID to update
     * @param videoDTO the updated video data
     * @return the updated video DTO
     */
    @Transactional
    public VideoDTO updateVideo(Long id, VideoDTO videoDTO) {
        logger.debug("Updating video with ID: {}", id);
        Video existingVideo = videoRepository.findById(id)
                .orElseThrow(() -> new jakarta.persistence.EntityNotFoundException("Video not found with ID: " + id));
        
        // Update the existing video with data from the DTO
        videoMapper.updateEntityFromDto(videoDTO, existingVideo);
        
        // Save the updated video
        Video updatedVideo = videoRepository.save(existingVideo);
        logger.info("Updated video: {} (ID: {})", updatedVideo.getTitle(), updatedVideo.getId());
        
        // Convert back to DTO and return
        return videoMapper.toDto(updatedVideo);
    }
    
    /**
     * Helper class to store video relevance score
     */
    private static class VideoRelevance {
        final Video video;
        final int score;
        
        VideoRelevance(Video video, int score) {
            this.video = video;
            this.score = score;
        }
    }

    /**
     * Find related videos based on tags and hashtags
     *
     * @param video the source video
     * @param limit maximum number of related videos to return
     * @return list of related videos
     */
    public List<Video> findRelatedVideos(Video video, int limit) {
        logger.debug("Finding related videos for video ID: {}, limit: {}", video.getId(), limit);
        
        // Get all videos
        List<Video> allVideos = videoRepository.findByIsVisibleTrue();
        
        // Remove the source video from the list
        allVideos.removeIf(v -> v.getId().equals(video.getId()));
        
        // Sort videos by relevance (number of matching tags and hashtags)
        return allVideos.stream()
            .filter(v -> v.getIsVisible() != null && v.getIsVisible())
            .map(relatedVideo -> {
                int score = 0;
                // Count matching tags
                if (video.getTags() != null && relatedVideo.getTags() != null) {
                    score += video.getTags().stream()
                        .filter(tag -> relatedVideo.getTags().contains(tag))
                        .count();
                }
                // Count matching hashtags
                if (video.getHashtags() != null && relatedVideo.getHashtags() != null) {
                    score += video.getHashtags().stream()
                        .filter(hashtag -> relatedVideo.getHashtags().contains(hashtag))
                        .count();
                }
                return new VideoRelevance(relatedVideo, score);
            })
            .sorted((a, b) -> Integer.compare(b.score, a.score))
            .limit(limit)
            .map(vr -> vr.video)
            .toList();
    }
}
